#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ neosintez_api.
"""

import argparse
import subprocess
import sys
from pathlib import Path


def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"\n{'=' * 60}")
    print(f"üîÑ {description}")
    print(f"{'=' * 60}")

    try:
        result = subprocess.run(cmd, shell=True, check=True, capture_output=False)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞ (–∫–æ–¥ {e.returncode})")
        return False


def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ neosintez_api")
    parser.add_argument(
        "--type",
        choices=["all", "unit", "integration", "coverage"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
    )
    parser.add_argument("--verbose", "-v", action="store_true", help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument(
        "--fail-fast", "-x", action="store_true", help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ"
    )

    args = parser.parse_args()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("neosintez_api").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)

    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ neosintez_api")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")

    verbose_flag = "-v" if args.verbose else ""
    fail_fast_flag = "-x" if args.fail_fast else ""

    success = True

    if args.type in ["all", "unit"]:
        # Unit —Ç–µ—Å—Ç—ã
        success &= run_command(
            f"python -m pytest tests/test_type_mapping.py {verbose_flag} {fail_fast_flag}",
            "Unit —Ç–µ—Å—Ç—ã - –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤",
        )

        success &= run_command(
            f"python -m pytest tests/test_cache.py {verbose_flag} {fail_fast_flag}",
            "Unit —Ç–µ—Å—Ç—ã - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
        )

        success &= run_command(
            f"python -m pytest tests/test_validation.py {verbose_flag} {fail_fast_flag}",
            "Unit —Ç–µ—Å—Ç—ã - –≤–∞–ª–∏–¥–∞—Ü–∏—è",
        )

    if args.type in ["all", "integration"]:
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        success &= run_command(
            f"python -m pytest tests/test_integration.py {verbose_flag} {fail_fast_flag}",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã",
        )

    if args.type in ["all", "coverage"]:
        # –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        success &= run_command(
            f"python -m pytest tests/ --cov=neosintez_api --cov-report=term-missing --cov-report=html {verbose_flag}",
            "–í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞",
        )

        if success:
            print("\nüìä –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")

    print(f"\n{'=' * 60}")
    if success:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –ó–∞–¥–∞—á–∞ 4 (–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    print(f"{'=' * 60}")


if __name__ == "__main__":
    main()
