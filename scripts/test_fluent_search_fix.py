"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fluent API –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ EXISTS.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ SearchQueryBuilder –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
–æ–ø–µ—Ä–∞—Ç–æ—Ä EXISTS –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç "None" –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏.
"""

import asyncio
import logging
import os

from dotenv import load_dotenv

from neosintez_api import NeosintezClient
from neosintez_api.core.enums import SearchOperatorType


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def test_fluent_search_with_exists():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç fluent API —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º EXISTS –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ fluent API —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º EXISTS")

    load_dotenv()

    async with NeosintezClient() as client:
        search_service = client.search

        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π EXISTS —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
        logger.info("\n--- –¢–µ—Å—Ç 1: EXISTS —Å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π ---")
        try:
            objects1 = (
                await search_service.query()
                .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
                .with_attribute("94193ed0-2705-f011-91d5-005056b6948b", "", SearchOperatorType.EXISTS)
                .find_all()
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç 1: –ø–æ–ª—É—á–µ–Ω–æ {len(objects1)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 1 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

        # –¢–µ—Å—Ç 2: EXISTS —Å None
        logger.info("\n--- –¢–µ—Å—Ç 2: EXISTS —Å None ---")
        try:
            objects2 = (
                await search_service.query()
                .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
                .with_attribute("94193ed0-2705-f011-91d5-005056b6948b", None, SearchOperatorType.EXISTS)
                .find_all()
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç 2: –ø–æ–ª—É—á–µ–Ω–æ {len(objects2)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 2 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

        # –¢–µ—Å—Ç 3: EXISTS —Å –∏–º–µ–Ω–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        logger.info("\n--- –¢–µ—Å—Ç 3: EXISTS —Å –∏–º–µ–Ω–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞ (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞) ---")
        try:
            objects3 = (
                await search_service.query()
                .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
                .with_attribute_name("–¢–≠–ü –æ–±—ä–µ–∫—Ç–∞", "", SearchOperatorType.EXISTS)
                .find_all()
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç 3: –ø–æ–ª—É—á–µ–Ω–æ {len(objects3)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 3 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

        # –¢–µ—Å—Ç 4: EXISTS —Å –∏–º–µ–Ω–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞ (None)
        logger.info("\n--- –¢–µ—Å—Ç 4: EXISTS —Å –∏–º–µ–Ω–µ–º –∞—Ç—Ä–∏–±—É—Ç–∞ (None) ---")
        try:
            objects4 = (
                await search_service.query()
                .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
                .with_attribute_name("–¢–≠–ü –æ–±—ä–µ–∫—Ç–∞", None, SearchOperatorType.EXISTS)
                .find_all()
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç 4: –ø–æ–ª—É—á–µ–Ω–æ {len(objects4)} –æ–±—ä–µ–∫—Ç–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 4 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

        # –¢–µ—Å—Ç 5: –î–≤–æ–π–Ω–æ–π EXISTS (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ)
        logger.info("\n--- –¢–µ—Å—Ç 5: –î–≤–æ–π–Ω–æ–π EXISTS (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ) ---")
        try:
            objects5 = (
                await search_service.query()
                .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
                .with_attribute("94193ed0-2705-f011-91d5-005056b6948b", "", SearchOperatorType.EXISTS)
                .with_attribute("a2c63c73-de0a-f011-91d7-005056b6948b", "", SearchOperatorType.EXISTS)
                .find_all()
            )
            logger.info(f"‚úÖ –¢–µ—Å—Ç 5: –ø–æ–ª—É—á–µ–Ω–æ {len(objects5)} –æ–±—ä–µ–∫—Ç–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if len(objects5) == 4:
                logger.info("üéØ –¶–ï–õ–ï–í–û–ô –ü–û–ö–ê–ó–ê–¢–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢: 4 –æ–±—ä–µ–∫—Ç–∞")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects5)} (–æ–∂–∏–¥–∞–ª–æ—Å—å 4)")

        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 5 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")

        # –¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—ã—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        logger.info("\n--- –¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å—ã—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º ---")
        try:
            # –°—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            raw_payload = {
                "Mode": 0,
                "Filters": [{"Type": 5, "Value": "8cedae0c-7e23-ed11-9141-005056b6948b"}],
                "Conditions": [
                    {
                        "Type": 1,
                        "Direction": 1,
                        "Operator": 7,
                        "Logic": 0,
                        "Attribute": "94193ed0-2705-f011-91d5-005056b6948b",
                    },
                    {
                        "Type": 1,
                        "Direction": 1,
                        "Operator": 7,
                        "Logic": 2,
                        "Attribute": "a2c63c73-de0a-f011-91d7-005056b6948b",
                    },
                ],
            }

            status, response_data = await client._request_raw(
                method="POST",
                endpoint="/api/objects/search?skip=0&take=20",
                data=raw_payload,
                headers={"X-HTTP-Method-Override": "GET", "Accept": "application/json, text/plain, */*"},
            )

            if status == 200:
                raw_objects = response_data.get("Result", [])
                logger.info(f"üìä –°—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {len(raw_objects)} –æ–±—ä–µ–∫—Ç–æ–≤")

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å fluent –∑–∞–ø—Ä–æ—Å–æ–º
                if len(objects5) == len(raw_objects):
                    logger.info("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                else:
                    logger.warning(f"‚ö†Ô∏è –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: fluent={len(objects5)}, raw={len(raw_objects)}")
            else:
                logger.error(f"‚ùå –°—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª: —Å—Ç–∞—Ç—É—Å {status}")

        except Exception as e:
            logger.error(f"‚ùå –¢–µ—Å—Ç 6 –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è fluent API")

    try:
        await test_fluent_search_with_exists()
        logger.info("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback

        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")


if __name__ == "__main__":
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
