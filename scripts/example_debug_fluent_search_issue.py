"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å fluent API –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º EXISTS.

–ü—Ä–æ–±–ª–µ–º–∞: Fluent API —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ EXISTS,
—á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–µ 500 –æ—Ç API –ù–µ–æ—Å–∏–Ω—Ç–µ–∑.
"""

import asyncio
import json
import logging
import os
from typing import Any, Dict, Tuple

from dotenv import load_dotenv

from neosintez_api import NeosintezAPIError, NeosintezClient
from neosintez_api.core.enums import SearchOperatorType


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


async def make_raw_request_with_payload_logging(client: NeosintezClient, payload: Dict[str, Any]) -> Tuple[int, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—ã—Ä–æ–π HTTP –∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º payload.

    Args:
        client: –≠–∫–∑–µ–º–ø–ª—è—Ä NeosintezClient
        payload: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        Tuple[int, Any]: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    """
    logger.info("üîç –í—ã–ø–æ–ª–Ω—è—é —Å—ã—Ä–æ–π HTTP –∑–∞–ø—Ä–æ—Å...")
    logger.info(f"üì§ Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")

    try:
        status, response_data = await client._request_raw(
            method="POST",
            endpoint="/api/objects/search?skip=0&take=20",
            data=payload,
            headers={"X-HTTP-Method-Override": "GET", "Accept": "application/json, text/plain, */*"},
        )

        logger.info(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")

        if status == 200:
            if isinstance(response_data, dict):
                result = response_data.get("Result", [])
                total = response_data.get("Total", 0)
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –æ–±—ä–µ–∫—Ç–æ–≤ (Total: {total})")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(response_data)}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: {status} - {response_data}")

        return status, response_data

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—ã—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise


async def make_fluent_request_with_debugging(client: NeosintezClient) -> Tuple[int, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç fluent API –∑–∞–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π.

    Args:
        client: –≠–∫–∑–µ–º–ø–ª—è—Ä NeosintezClient

    Returns:
        Tuple[int, Any]: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
    """
    logger.info("üîç –í—ã–ø–æ–ª–Ω—è—é fluent API –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–ª–∞–¥–∫–æ–π...")

    try:
        search_service = client.search

        # –°–æ–∑–¥–∞–µ–º fluent –∑–∞–ø—Ä–æ—Å
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ fluent –∑–∞–ø—Ä–æ—Å–∞...")
        query_builder = (
            search_service.query()
            .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            .with_attribute("94193ed0-2705-f011-91d5-005056b6948b", "", SearchOperatorType.EXISTS)
            .with_attribute("a2c63c73-de0a-f011-91d7-005056b6948b", "", SearchOperatorType.EXISTS)
        )

        logger.info("üìù Fluent –∑–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
            internal_request = query_builder._build_request()
            logger.info(
                f"üìã –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å fluent API: {json.dumps(internal_request, indent=2, ensure_ascii=False)}"
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å: {e}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        logger.info("üöÄ –í—ã–ø–æ–ª–Ω—è—é fluent –∑–∞–ø—Ä–æ—Å...")
        objects = await query_builder.find_all()

        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ fluent API")
        return 200, {"Result": objects, "Total": len(objects)}

    except NeosintezAPIError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –≤ fluent –∑–∞–ø—Ä–æ—Å–µ: {e}")
        return 500, str(e)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fluent –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise


async def compare_payloads():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç payload'—ã —Å—ã—Ä–æ–≥–æ –∏ fluent –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    logger.info("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ payload'–æ–≤ —Å—ã—Ä–æ–≥–æ –∏ fluent –∑–∞–ø—Ä–æ—Å–æ–≤...")

    # –†–∞–±–æ—á–∏–π payload –¥–ª—è —Å—ã—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    working_payload = {
        "Mode": 0,
        "Filters": [{"Type": 5, "Value": "8cedae0c-7e23-ed11-9141-005056b6948b"}],
        "Conditions": [
            {
                "Type": 1,
                "Direction": 1,  # INSIDE
                "Operator": 7,  # EXISTS
                "Logic": 0,
                "Attribute": "94193ed0-2705-f011-91d5-005056b6948b",
            },
            {
                "Type": 1,
                "Direction": 1,  # INSIDE
                "Operator": 7,  # EXISTS
                "Logic": 2,  # AND
                "Attribute": "a2c63c73-de0a-f011-91d7-005056b6948b",
            },
        ],
    }

    logger.info("üìã –†–∞–±–æ—á–∏–π payload (—Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å):")
    logger.info(json.dumps(working_payload, indent=2, ensure_ascii=False))

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ fluent API
    logger.info("\nüîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ fluent API:")
    logger.info("1. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–µ–º 'Value': fluent API –¥–æ–±–∞–≤–ª—è–µ—Ç Value='' –¥–ª—è EXISTS")
    logger.info("2. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–µ–º 'Direction': fluent API —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Direction=0 –≤–º–µ—Å—Ç–æ 1")
    logger.info("3. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–≥–∏–∫–æ–π —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞")

    return working_payload


async def test_different_approaches(client: NeosintezClient):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞.
    """
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤...")

    search_service = client.search

    # –ü–æ–¥—Ö–æ–¥ 1: –¢–æ–ª—å–∫–æ —Å with_attribute (–±–µ–∑ Value)
    logger.info("\n--- –ü–æ–¥—Ö–æ–¥ 1: with_attribute –±–µ–∑ Value ---")
    try:
        query1 = (
            search_service.query()
            .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            .with_attribute("94193ed0-2705-f011-91d5-005056b6948b", None, SearchOperatorType.EXISTS)
        )
        objects1 = await query1.find_all()
        logger.info(f"‚úÖ –ü–æ–¥—Ö–æ–¥ 1: –ø–æ–ª—É—á–µ–Ω–æ {len(objects1)} –æ–±—ä–µ–∫—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–¥—Ö–æ–¥ 1 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")

    # –ü–æ–¥—Ö–æ–¥ 2: –° with_attribute_name
    logger.info("\n--- –ü–æ–¥—Ö–æ–¥ 2: with_attribute_name ---")
    try:
        query2 = (
            search_service.query()
            .with_class_name("–û–±—ä–µ–∫—Ç —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            .with_attribute_name("–¢–≠–ü –æ–±—ä–µ–∫—Ç–∞", None, SearchOperatorType.EXISTS)
        )
        objects2 = await query2.find_all()
        logger.info(f"‚úÖ –ü–æ–¥—Ö–æ–¥ 2: –ø–æ–ª—É—á–µ–Ω–æ {len(objects2)} –æ–±—ä–µ–∫—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–¥—Ö–æ–¥ 2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")

    # –ü–æ–¥—Ö–æ–¥ 3: –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ SearchRequest
    logger.info("\n--- –ü–æ–¥—Ö–æ–¥ 3: –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ SearchRequest ---")
    try:
        from neosintez_api.core.enums import SearchConditionType, SearchDirectionType, SearchFilterType, SearchLogicType
        from neosintez_api.models import SearchCondition, SearchFilter, SearchRequest

        manual_request = SearchRequest(
            Filters=[SearchFilter(Type=SearchFilterType.BY_CLASS, Value="8cedae0c-7e23-ed11-9141-005056b6948b")],
            Conditions=[
                SearchCondition(
                    Type=SearchConditionType.ATTRIBUTE,
                    Direction=SearchDirectionType.INSIDE,
                    Operator=SearchOperatorType.EXISTS,
                    Logic=SearchLogicType.NONE,
                    Attribute="94193ed0-2705-f011-91d5-005056b6948b",
                ),
                SearchCondition(
                    Type=SearchConditionType.ATTRIBUTE,
                    Direction=SearchDirectionType.INSIDE,
                    Operator=SearchOperatorType.EXISTS,
                    Logic=SearchLogicType.AND,
                    Attribute="a2c63c73-de0a-f011-91d7-005056b6948b",
                ),
            ],
            Mode=0,
        )

        objects3 = await client.objects.search_all(manual_request)
        logger.info(f"‚úÖ –ü–æ–¥—Ö–æ–¥ 3: –ø–æ–ª—É—á–µ–Ω–æ {len(objects3)} –æ–±—ä–µ–∫—Ç–æ–≤")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–¥—Ö–æ–¥ 3 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å fluent API")

    load_dotenv()

    async with NeosintezClient() as client:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ payload'–æ–≤
        working_payload = await compare_payloads()

        # –¢–µ—Å—Ç —Å—ã—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logger.info("\n" + "=" * 50)
        logger.info("üîç –¢–ï–°–¢ 1: –°—ã—Ä–æ–π HTTP –∑–∞–ø—Ä–æ—Å")
        logger.info("=" * 50)

        status1, response1 = await make_raw_request_with_payload_logging(client, working_payload)

        # –¢–µ—Å—Ç fluent –∑–∞–ø—Ä–æ—Å–∞
        logger.info("\n" + "=" * 50)
        logger.info("üîç –¢–ï–°–¢ 2: Fluent API –∑–∞–ø—Ä–æ—Å")
        logger.info("=" * 50)

        status2, response2 = await make_fluent_request_with_debugging(client)

        # –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        logger.info("\n" + "=" * 50)
        logger.info("üîç –¢–ï–°–¢ 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã")
        logger.info("=" * 50)

        await test_different_approaches(client)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("\n" + "=" * 50)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
        logger.info("=" * 50)

        logger.info(f"–°—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å: —Å—Ç–∞—Ç—É—Å {status1}")
        logger.info(f"Fluent –∑–∞–ø—Ä–æ—Å: —Å—Ç–∞—Ç—É—Å {status2}")

        if status1 == 200 and status2 != 200:
            logger.error("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: fluent API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            logger.info("üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            logger.info("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ SearchQueryBuilder")
            logger.info("2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–µ–º 'Value' –¥–ª—è EXISTS")
            logger.info("3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø–æ–ª–µ–º 'Direction' –¥–ª—è EXISTS")
            logger.info("4. –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ EXISTS")
        elif status1 == 200 and status2 == 200:
            logger.info("‚úÖ –û–±–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—ã—Ä—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")


if __name__ == "__main__":
    if os.name == "nt":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    asyncio.run(main())
