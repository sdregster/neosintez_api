"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ CRUD:
–ß—Ç–µ–Ω–∏–µ -> –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è -> –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ -> –ü—Ä–æ–≤–µ—Ä–∫–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö,
–≤–∫–ª—é—á–∞—è —Å—Ç—Ä–æ–∫–∏, —á–∏—Å–ª–∞, –¥–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –æ–±—ä–µ–∫—Ç—ã.
"""

import asyncio
import traceback
from datetime import datetime
import copy

from neosintez_api.config import NeosintezConfig
from neosintez_api.core.client import NeosintezClient
from neosintez_api.services import ObjectToModelFactory, ObjectService
from neosintez_api.utils import generate_field_name


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
    1. –°–æ–∑–¥–∞–µ—Ç Pydantic-–º–æ–¥–µ–ª—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞.
    2. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    3. –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤.
    4. –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –ù–µ–æ—Å–∏–Ω—Ç–µ–∑–µ.
    5. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å.
    6. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    test_object_id = "8681c50f-ec53-f011-91e6-005056b6948b"
    
    print(f"--- –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—ä–µ–∫—Ç–∞: {test_object_id} ---\n")

    settings = NeosintezConfig()
    client = NeosintezClient(settings)
    object_to_model_factory = ObjectToModelFactory(client)
    object_service = ObjectService(client)
    
    original_model_instance = None
    blueprint = None
    
    try:
        # --- –≠—Ç–∞–ø 1: –ß—Ç–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ---
        print("‚ñ∂Ô∏è –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Pydantic-–º–æ–¥–µ–ª–∏ –∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        blueprint = await object_to_model_factory.create_from_object_id(test_object_id)
        original_model_instance = copy.deepcopy(blueprint.model_instance)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å '{blueprint.model_class.__name__}' —Å–æ–∑–¥–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
        # --- –≠—Ç–∞–ø 2: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        print("\n‚ñ∂Ô∏è –≠—Ç–∞–ø 2: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞...")
        
        modified_instance = copy.deepcopy(original_model_instance)
        
        # –ì–æ—Ç–æ–≤–∏–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ "–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ" –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
        new_name = f"–†–û–ö–ï–¢–ê_–ò–ó–ú–ï–ù–ï–ù–û_{datetime.now().isoformat()}"
        new_mass = 777
        new_date = datetime(2030, 1, 1).isoformat()
        
        massa_field = generate_field_name("–ú–∞—Å—Å–∞")
        data_postavki_field = generate_field_name("–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏")
        edinica_izmereniya_field = generate_field_name("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        modified_instance.name = new_name
        setattr(modified_instance, massa_field, new_mass)
        setattr(modified_instance, data_postavki_field, new_date)
        # setattr(modified_instance, edinica_izmereniya_field, None) # API –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–±—Ä–æ—Å —Å—Å—ã–ª–∫–∏
        
        print(f"   - –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: '{new_name}'")
        print(f"   - '{massa_field}' (–ú–∞—Å—Å–∞) –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_mass}")
        print(f"   - '{data_postavki_field}' (–î–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤–∫–∏) –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: '{new_date}'")
        # print(f"   - '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è' –Ω–µ –∏–∑–º–µ–Ω—è–µ–º, —Ç.–∫. API –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–±—Ä–æ—Å.")

        # --- –≠—Ç–∞–ø 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
        print("\n‚ñ∂Ô∏è –≠—Ç–∞–ø 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ù–µ–æ—Å–∏–Ω—Ç–µ–∑...")
        await object_service.update(
            modified_instance, blueprint.attributes_meta
        )
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

        # --- –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ ---
        print("\n‚ñ∂Ô∏è –≠—Ç–∞–ø 4: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        reread_object = await object_service.read(test_object_id, blueprint.model_class)
        
        assert reread_object.name == new_name
        assert getattr(reread_object, massa_field) == new_mass
        # API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞—Ç—É –≤ —Å–≤–æ–µ–º —Ñ–æ—Ä–º–∞—Ç–µ, —Å—Ä–∞–≤–Ω–∏–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        assert getattr(reread_object, data_postavki_field, "").startswith("2030-01-01")
        # assert getattr(reread_object, edinica_izmereniya_field) is None
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        
        print(f"\nüéâ –¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤: {e}")
        tb_str = traceback.format_exc()
        print("\n--- –ü–æ–ª–Ω—ã–π Traceback ---")
        print(tb_str)

    finally:
        # --- –≠—Ç–∞–ø 5: –û—á–∏—Å—Ç–∫–∞ ---
        if original_model_instance and blueprint:
            print("\n‚ñ∂Ô∏è –≠—Ç–∞–ø 5: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞...")
            try:
                await object_service.update(
                    original_model_instance, blueprint.attributes_meta
                )
                print("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {e}")

        await client.close()
        print("\n–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")


if __name__ == "__main__":
    asyncio.run(main()) 