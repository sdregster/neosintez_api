"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç.
"""

import asyncio
import json
import logging
import re
from typing import Any, Dict, List

from neosintez_api.config import NeosintezConfig
from neosintez_api.core.client import NeosintezClient


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


def extract_objects_from_html(html_content: str) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ JavaScript –∫–æ–¥–∞ –≤ HTML-–æ—Ç–≤–µ—Ç–µ.

    Args:
        html_content: HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # –ò—â–µ–º JavaScript –±–ª–æ–∫ —Å window.clientContext
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
        script_start = html_content.find("<script>window.clientContext = {")
        if script_start == -1:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω JavaScript –±–ª–æ–∫ —Å window.clientContext")
            return []

        # –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ - —Å–ª–µ–¥—É—é—â–∏–π </script> –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
        script_end = html_content.find("</script>", script_start)
        if script_end == -1:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü JavaScript –±–ª–æ–∫–∞")
            return []

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É <script> –∏ </script>
        script_content = html_content[script_start:script_end]

        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ window.clientContext = { ... }
        json_start = script_content.find("{")
        if json_start == -1:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ JavaScript –±–ª–æ–∫–µ")
            return []

        js_code = script_content[json_start:]

        # –û—á–∏—â–∞–µ–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        js_code = re.sub(r"//.*?\n", "\n", js_code)
        js_code = re.sub(r"/\*.*?\*/", "", js_code, flags=re.DOTALL)

        logger.info(f"–ù–∞–π–¥–µ–Ω JavaScript –±–ª–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–º: {len(js_code)} —Å–∏–º–≤–æ–ª–æ–≤")

        # –ü–∞—Ä—Å–∏–º JSON
        client_context = json.loads(js_code)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        objects_data = client_context.get("objects", {}).get("objects", [])

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects_data)}")
        return objects_data

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ–±—ä–µ–∫—Ç—ã –ø–æ —á–∞—Å—Ç—è–º
        try:
            logger.info("–ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ–±—ä–µ–∫—Ç—ã –ø–æ —á–∞—Å—Ç—è–º...")

            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
            objects_start = js_code.find('"objects":[')
            if objects_start == -1:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")
                return []

            # –ò—â–µ–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
            bracket_count = 0
            objects_end = objects_start + 10  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '"objects":['

            for i, char in enumerate(js_code[objects_start + 10 :], objects_start + 10):
                if char == "[":
                    bracket_count += 1
                elif char == "]":
                    bracket_count -= 1
                    if bracket_count == 0:
                        objects_end = i + 1
                        break

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            objects_array_str = js_code[objects_start + 10 : objects_end]

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            objects = []
            current_obj = ""
            brace_count = 0

            for char in objects_array_str:
                current_obj += char
                if char == "{":
                    brace_count += 1
                elif char == "}":
                    brace_count -= 1
                    if brace_count == 0:
                        # –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—ä–µ–∫—Ç
                        try:
                            obj = json.loads(current_obj)
                            if "Id" in obj and "Name" in obj:
                                objects.append(obj)
                        except json.JSONDecodeError:
                            pass
                        current_obj = ""

            logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º: {len(objects)}")
            return objects

        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º: {e2}")
            return []

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")
        return []


def analyze_html_content(html_content: str) -> None:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""

    logger.info("üîç –ê–Ω–∞–ª–∏–∑ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞:")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    title_match = re.search(r"<title>(.*?)</title>", html_content, re.IGNORECASE)
    if title_match:
        logger.info(f"üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title_match.group(1)}")

    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ CSS –∏ JS —Ñ–∞–π–ª—ã
    css_files = re.findall(r'href="([^"]*\.css[^"]*)"', html_content)
    js_files = re.findall(r'src="([^"]*\.js[^"]*)"', html_content)

    logger.info(f"üé® –ù–∞–π–¥–µ–Ω–æ CSS —Ñ–∞–π–ª–æ–≤: {len(css_files)}")
    logger.info(f"‚ö° –ù–∞–π–¥–µ–Ω–æ JS —Ñ–∞–π–ª–æ–≤: {len(js_files)}")

    # –ò—â–µ–º —Ñ–æ—Ä–º—ã
    forms = re.findall(r"<form[^>]*>", html_content)
    logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º: {len(forms)}")

    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ API endpoints
    api_links = re.findall(r'href="([^"]*api[^"]*)"', html_content, re.IGNORECASE)
    if api_links:
        logger.info(f"üîó API —Å—Å—ã–ª–∫–∏: {api_links[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Neosintez
    neosintez_matches = re.findall(r"neosintez", html_content, re.IGNORECASE)
    logger.info(f"üè¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è Neosintez: {len(neosintez_matches)}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ JavaScript –∫–æ–¥–∞
    logger.info("\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
    objects = extract_objects_from_html(html_content)

    if objects:
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤:")
        for i, obj in enumerate(objects, 1):
            obj_id = obj.get("Id", "N/A")
            obj_name = obj.get("Name", "N/A")
            has_children = obj.get("HasChildren", False)
            level = obj.get("Level", 0)

            logger.info(f"  {i:2d}. ID: {obj_id}")
            logger.info(f"      –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {obj_name}")
            logger.info(f"      –£—Ä–æ–≤–µ–Ω—å: {level}, –ï—Å—Ç—å –¥–µ—Ç–∏: {has_children}")
            logger.info("")
    else:
        logger.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–µ")


def save_html_for_analysis(html_content: str, filename: str = "portal_page.html") -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        html_content: HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        with open(filename, "w", encoding="utf-8") as f:
            f.write(html_content)
        logger.info(f"HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML: {e}")


def search_for_objects_patterns(html_content: str) -> None:
    """
    –ò—â–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤ HTML –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

    Args:
        html_content: HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    """
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ HTML...")

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "objects"
    objects_matches = re.findall(r'"objects"', html_content, re.IGNORECASE)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 'objects': {len(objects_matches)}")

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "clientContext"
    client_context_matches = re.findall(r"clientContext", html_content, re.IGNORECASE)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 'clientContext': {len(client_context_matches)}")

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è "window"
    window_matches = re.findall(r"window\.", html_content, re.IGNORECASE)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π 'window.': {len(window_matches)}")

    # –ò—â–µ–º JSON-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å Id
    id_matches = re.findall(r'"Id"\s*:\s*"[^"]*"', html_content, re.IGNORECASE)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π 'Id': {len(id_matches)}")

    # –ò—â–µ–º JSON-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å Name
    name_matches = re.findall(r'"Name"\s*:\s*"[^"]*"', html_content, re.IGNORECASE)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π 'Name': {len(name_matches)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ Id –∏ Name
    if id_matches:
        logger.info("–ü—Ä–∏–º–µ—Ä—ã Id:")
        for i, match in enumerate(id_matches[:5]):
            logger.info(f"  {i + 1}. {match}")

    if name_matches:
        logger.info("–ü—Ä–∏–º–µ—Ä—ã Name:")
        for i, match in enumerate(name_matches[:5]):
            logger.info(f"  {i + 1}. {match}")


def save_objects_to_json(objects: List[Dict[str, Any]], filename: str = "extracted_objects.json") -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ JSON —Ñ–∞–π–ª.

    Args:
        objects: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(objects, f, ensure_ascii=False, indent=2)
        logger.info(f"–û–±—ä–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤: {e}")


def print_objects_summary(objects: List[Dict[str, Any]]) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º.

    Args:
        objects: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    """
    if not objects:
        return

    logger.info("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–∞–º:")
    logger.info(f"   –í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects)}")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    levels = {}
    for obj in objects:
        level = obj.get("Level", 0)
        levels[level] = levels.get(level, 0) + 1

    logger.info("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
    for level in sorted(levels.keys()):
        logger.info(f"     –£—Ä–æ–≤–µ–Ω—å {level}: {levels[level]} –æ–±—ä–µ–∫—Ç–æ–≤")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –¥–µ—Ç—å–º–∏
    objects_with_children = [obj for obj in objects if obj.get("HasChildren", False)]
    logger.info(f"   –û–±—ä–µ–∫—Ç–æ–≤ —Å –¥–µ—Ç—å–º–∏: {len(objects_with_children)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –¥–µ—Ç–µ–π
    objects_without_children = [obj for obj in objects if not obj.get("HasChildren", False)]
    logger.info(f"   –û–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –¥–µ—Ç–µ–π: {len(objects_without_children)}")


async def test_portal_page():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Ä—Ç–∞–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤."""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    config = NeosintezConfig()
    client = NeosintezClient(config)

    try:
        async with client:
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            await client.auth()
            logger.info("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            logger.info("–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Ä—Ç–∞–ª–∞...")
            html_content = await client.get_portal_page("/")

            logger.info(f"–ü–æ–ª—É—á–µ–Ω HTML —Ä–∞–∑–º–µ—Ä–æ–º: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {html_content[:500]}...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if "neosintez" in html_content.lower():
                logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è Neosintez")
            else:
                logger.warning("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            save_html_for_analysis(html_content)

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            search_for_objects_patterns(html_content)

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            analyze_html_content(html_content)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            objects = extract_objects_from_html(html_content)

            if objects:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ JSON
                save_objects_to_json(objects)

                # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
                print_objects_summary(objects)

                logger.info(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(objects)} –æ–±—ä–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")
                logger.info("üìÅ –û–±—ä–µ–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª extracted_objects.json")
            else:
                logger.warning("‚ö†Ô∏è –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–µ")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
            try:
                objects_page = await client.get_portal_page("/objects", params={"id": "test"})
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º: {len(objects_page)} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä–µ–∫—Ç–æ–≤: {e}")

            return html_content

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(test_portal_page())
