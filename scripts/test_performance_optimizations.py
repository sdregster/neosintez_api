"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ Excel.
"""

import asyncio
import logging
import time
from pathlib import Path

from neosintez_api.core.client import NeosintezClient
from neosintez_api.services.excel_importer import ExcelImporter


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
EXCEL_FILE_PATH = "data/Neosintez_Template_06-13 –°–µ—Ç–∏ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–º–µ—Ç–∞ –∫ –¥–æ–≥–æ–≤–æ—Ä—É).xlsx"
PARENT_OBJECT_ID = "001847f9-f044-f011-91e3-005056b6948b"


async def test_performance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"""

    if not Path(EXCEL_FILE_PATH).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {EXCEL_FILE_PATH}")
        return

    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞...")
    print("=" * 80)

    client = NeosintezClient()
    try:
        importer = ExcelImporter(client)

        # –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        print("üìã –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–º–ø–æ—Ä—Ç–∞...")
        start_time = time.time()

        preview = await importer.preview_import(EXCEL_FILE_PATH, PARENT_OBJECT_ID)

        preview_time = time.time() - start_time
        print(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {preview_time:.2f} —Å–µ–∫")
        print(f"   üìä –û–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: {preview.estimated_objects}")
        print(f"   üìä –ö–ª–∞—Å—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(preview.structure.classes_found)}")

        if preview.validation_errors:
            print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in preview.validation_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
                print(f"   - {error}")
            return

        # –≠—Ç–∞–ø 2: –ò–º–ø–æ—Ä—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        print("\nüî• –≠—Ç–∞–ø 2: –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –∏–º–ø–æ—Ä—Ç...")
        print("   üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
        print("   üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤")
        print("   üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º batch —É—Å—Ç–∞–Ω–æ–≤–∫—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

        import_start = time.time()

        result = await importer.import_from_excel(EXCEL_FILE_PATH, PARENT_OBJECT_ID)

        import_time = time.time() - import_start
        total_time = time.time() - start_time

        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 80)
        print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ò–ú–ü–û–†–¢–ê:")
        print("=" * 80)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {result.total_created}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞: {import_time:.2f} —Å–µ–∫")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫")

        if result.total_created > 0:
            avg_time = import_time / result.total_created
            print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±—ä–µ–∫—Ç: {avg_time:.3f} —Å–µ–∫")

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            old_avg_time = 0.43  # –ò–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            improvement = ((old_avg_time - avg_time) / old_avg_time) * 100
            print(f"üöÄ –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {improvement:.1f}%")

            if improvement > 0:
                print(f"üéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ {old_avg_time / avg_time:.1f}x —Ä–∞–∑")

        print("\nüìä –û–±—ä–µ–∫—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º:")
        for level, count in sorted(result.created_by_level.items()):
            print(f"   - –£—Ä–æ–≤–µ–Ω—å {level}: {count} –æ–±—ä–µ–∫—Ç–æ–≤")

        if result.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(result.errors)}):")
            for error in result.errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                print(f"   - {error}")

        if result.warnings:
            print(f"\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(result.warnings)}):")
            for warning in result.warnings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                print(f"   - {warning}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()
    finally:
        await client.close()
        print("\nüîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –∑–∞–∫—Ä—ã—Ç–æ")


if __name__ == "__main__":
    asyncio.run(test_performance())
