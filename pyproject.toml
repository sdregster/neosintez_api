[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "neosintez-api"
description = "Python клиент для работы с API Неосинтез"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "tenacity>=8.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
    "factory-boy>=3.2.1",
    "faker>=19.0.0",
]

[project.scripts]
neosintez = "neosintez_api.__main__:cli"

[tool.setuptools_scm]

[tool.ruff]
# Длина строки
line-length = 120

# Исключенные папки и файлы
exclude = [
    ".git",
    "__pycache__",
    ".ruff_cache",
    ".venv",
    "venv",
    "env",
    ".env",
    "neosintez_api/core/generated/",  # Автогенерируемые файлы
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Включенные правила
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

# Игнорируемые правила глобально
ignore = [
    "RUF001",  # Амбигуозные символы кириллицы в строках
    "RUF002",  # Амбигуозные символы кириллицы в docstrings
    "RUF003",  # Амбигуозные символы кириллицы в комментариях
]

# Игнорируемые ошибки для конкретных файлов
[tool.ruff.lint.per-file-ignores]
"neosintez_api/core/generated/*" = [
    "F403",  # star imports
    "F405",  # undefined names from star imports
    "E501",  # line too long
]
"scripts/*" = [
    "F841",  # неиспользуемые переменные в скриптах (часто для отладки)
    "E501",  # длинные строки в скриптах
]
"tests/*" = [
    "E501",  # длинные строки в тестах
]

[tool.ruff.format]
# Использовать двойные кавычки
quote-style = "double"

# Отступы пробелами
indent-style = "space"

[tool.ruff.lint.isort]
# Настройки сортировки импортов
known-first-party = ["neosintez_api"]
force-single-line = false
lines-after-imports = 2

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neosintez_api.core.generated.*",
]
ignore_errors = true 